#include <iostream>
using namespace std;

// Function to heapify a subtree rooted at index i
void maxHeapify(int arr[], int n, int i)
{
    int largest = i;          // Root is initially the largest
    int left = 2 * i + 1;     // Left child index
    int right = 2 * i + 2;    // Right child index

    // Check if left child exists and is greater than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // Check if right child exists and is greater than the largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not the root, swap and heapify the affected subtree
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

// Function to build a Max Heap
void buildMaxHeap(int arr[], int n)
{
    // Start from the last non-leaf node and call maxHeapify for each
    for (int i = n / 2 - 1; i >= 0; i--)
        maxHeapify(arr, n, i);
}

// Function to perform Heap Sort
void heapSort(int arr[], int n)
{
    // Step 1: Build a Max Heap
    buildMaxHeap(arr, n);

    // Step 2: Extract elements one by one
    for (int i = n - 1; i > 0; i--)
    {
        // Move the current root (largest element) to the end
        swap(arr[0], arr[i]);

        // Restore the Max Heap property for the reduced heap
        maxHeapify(arr, i, 0);
    }
}

// Function to print the array
void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

// Main function
int main()
{
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    cout << "Original array: ";
    printArray(arr, n);

    // Perform Heap Sort using Max Heap
    heapSort(arr, n);

    cout << "Sorted array: ";
    printArray(arr, n);

    return 0;
}